#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";

const cluster = require("cluster");
const numCPUs = process.env.WEB_CONCURRENCY || 1;

if (cluster.isMaster) {
  // this is the master process
  let cworker, _i;
  for (cworker = _i = 1; 1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs;
       cworker = 1 <= numCPUs ? ++_i : --_i) {
    cluster.fork();
  }

  cluster.on("exit", function (worker, code, signal) {
    return cluster.fork();
  });
  return true;
}

let app = require('../app');
let debug = require('debug')('video_upload_compression:server');
const http = require('http');

/**
 * Get port from environment and store in Express
 */
const port = normalizePort(process.env.PORT || '8002');
app.set('port', port);
console.log("listening on port: " + port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Catching bad clients error which leads to H13 error codes on heroku
server.on('clientError', (err, socket) => {
  console.error(err);
  socket.end('HTTP/1.1 400 Bad Request\r\n\r\n');
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
